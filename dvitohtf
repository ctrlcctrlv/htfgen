#!/usr/bin/env texlua
kpse.set_program_name("luatex")
local lfs = require "lfs"
local lapp = require "lapp-mk4"
local htflib = require "htflibs.htflib"
local fontobj = require "htflibs.fontobj"
local template = require "litfonts-template"

-- load a map file. pdftex.map should contain all possible fonts
local fonts = fontobj("pdftex")

local args = lapp [[
dvitohtf - prepare TeX literate source for HTF fonts
  -f,--family (default nil) Font family name
  <input> (default nil) DVI file to process. If empty, it expects FD files on the standard input
]]



local function write_file(htfname, contents)
  -- local f = io.open(htfname, "w")
  -- f:write(contents)
  -- f:close()
  print(contents)
end

local function find_missing_fonts(tex4ht_output)
  local missing_fonts = {}
  for htf_font in tex4ht_output:gmatch("Couldn't find font `(.-)%.htf") do
    table.insert(missing_fonts, htf_font)
  end
  return missing_fonts
end

-- make test run on the dvi file to find unsupported fonts
local function run_tex4ht(dvifile)
  -- redirect stderr 
  local ext = dvifile:match("^.+(%..+)$")
  local command = io.popen("tex4ht -" .. ext .. " " .. dvifile .. " 2>&1", "r")
  -- local command = io.popen("tex4ht " .. dvifile .. " 2>&1", "r")
  local result = command:read("*all")
  command:close()
  return find_missing_fonts(result)
end
local missing_fonts = {}
if args.input~="nil" then
  missing_fonts = run_tex4ht(args.input)
else
  -- read list of fonts from the standard input
  for line in io.lines() do
    local font = line:gsub("^%s*",""):gsub("%s*$","")
    table.insert(missing_fonts, font)
  end
end


-- the font tables with equal hashes don't need to be written again,
-- the subsequent occurences can just link to the first one
local used_hashes = {}

print(template.head)

for _, fontfile in ipairs(missing_fonts) do
  local fontobject 
  -- the virtual fonts have priority over tfm fonts
  local vffile = kpse.find_file(fontfile, "vf")
  if vffile then
    fontobject = fonts:load_virtual_font(vffile)
  else
    local tfmfile = kpse.find_file(fontfile, "tfm")
    if tfmfile then
      fontobject = fonts:load_tfm_font(tfmfile)
    end
  end
  if fontobject then
    local htfname = fontfile .. ".htf"
    local hash = fontobject.hash
    local content
    local familyname = args.family or fontobject.style.familyname or fontfile
    local htf_dir = familyname:gsub("%s", "_") .. "/"
    local htf_path = "unicode/" .. htf_dir 
    -- the font with same structured has been used already
    if used_hashes[hash] then
      -- link to the previously used font table
      content = "." .. used_hashes[hash] .. "\n"
      htf_path = "alias/" .. htf_dir
    else
      content = htflib.fontobj_to_htf_table(fontobject).."\n"
      used_hashes[hash] = fontfile
    end
    print("% writing " .. htfname .. " hash: " .. fontobject.hash)
    print(htflib.htf_container(fontfile, htf_path, content.. htflib.fontobj_get_css(fontobject) .."\n"))

    -- write_file(htfname,  content .. htflib.fontobj_get_css(fontobject) .."\n")
    for _, missing in ipairs(fontobject.missing_glyphs) do
      print("Missing glyph", missing)
    end
  end

end

print(template.foot)
